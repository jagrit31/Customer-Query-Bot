# -*- coding: utf-8 -*-
"""Bookleaf_assignment1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u-BjU91gOCNVeZJ4XrhEIhmKEr4HpDAV
"""

pip install supabase flask flask_cors pandas scikit-learn numpy

"""**Imports & Supabase Connection**"""

import os
import csv
from datetime import datetime
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

from supabase import create_client, Client
SUPABASE_URL = "https://eqpwwtyqhyjukdudtklm.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVxcHd3dHlxaHlqdWtkdWR0a2xtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1ODExNTYzMCwiZXhwIjoyMDczNjkxNjMwfQ.qf2uTeYcEedH9JZAGeRALs9XiHYJrTgk7UrMU7aDruM"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

"""**Knowledge Base**"""

kb_docs = [
    {"id": "kb1", "title": "Publishing Timeline", "body": "Publishing usually takes 6-10 weeks after final submission. Live date depends on marketplace approvals."},
    {"id": "kb2", "title": "Royalty Payouts", "body": "Royalties are processed monthly and payments are initiated after final accounting. Taxes and returns can delay payments by up to 45 days."},
    {"id": "kb3", "title": "Author Copies", "body": "Author copies are shipped 2-4 weeks after the book goes live. You will receive a tracking link once shipped."},
    {"id": "kb4", "title": "Login Credentials", "body": "After payment, login credentials are emailed within 2 minutes. Check spam/junk if not found."},
    {"id": "kb5", "title": "Cover Design", "body": "You can design covers using the dashboard. Upload custom 5x8 inch covers or use templates."},
    {"id": "kb6", "title": "Add-On Services", "body": "Optional services include Global Distribution, Emily Dickinson Award, Copyright Registration, Bestseller Breakthrough Package."},
    {"id": "kb7", "title": "Dashboard Submissions", "body": "Submit poems in the dashboard. Save as draft. Finalize with Preview and Finish. Hindi supported."},
    {"id": "kb8", "title": "Royalty & Sales Reports", "body": "Check sales at https://ebooks.bookleafpub.com/sales-reports. 80% royalty for standard, 100% for Bestseller Breakthrough."},
    {"id": "kb9", "title": "Post Publishing Changes", "body": "Purchased post-publishing changes update your book within 4-5 business days."},
    {"id": "kb10", "title": "Awards & Recognition", "body": "Emily Dickinson Award is shipped 45-60 business days after book goes live. Not personalized."},
]

CONFIDENCE_THRESHOLD = 0.3
LOG_FILE = "query_log.csv"

"""**Fetch User from Supabase**"""

def get_user_from_db(email: str):
    """Fetch user from Supabase"""
    try:
        response = supabase.table("authors").select("*").ilike("email", email).execute()
        if response.data:
            return response.data[0]
        return None
    except Exception as e:
        print("‚ö†Ô∏è DB Error:", e)
        return None

"""**Query Classification**"""

def classify_query(query: str):
    query = query.lower()
    if any(word in query for word in ["live", "publish", "timeline", "book live"]):
        return "publishing_timeline"
    elif any(word in query for word in ["isbn", "book number"]):
        return "isbn"
    elif any(word in query for word in ["royalty", "payment", "money"]):
        return "royalty"
    elif any(word in query for word in ["add-on", "package", "award", "pr"]):
        return "add_on"
    elif any(word in query for word in ["final submission", "submission date", "submit my book", "book submission", "when did i submit"]):
        return "final_submission"
    elif any(word in query for word in ["dashboard", "access", "login"]):
        return "dashboard_access"
    elif any(word in query for word in ["all book details", "full details"]):
        return "all_book_details"
    elif any(word in query for word in ["author copy", "copy for author"]):
        return "author_copy"
    else:
        return "unknown"

"""**Logging Function**"""

def log_query(email, query, response, confidence):
    file_exists = os.path.exists(LOG_FILE)
    with open(LOG_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(["timestamp", "email", "query", "response", "confidence"])
        writer.writerow([datetime.now(), email, query, response, confidence])

"""**Respond to Query**"""

def respond_to_query(email, query):
    user = get_user_from_db(email)
    category = classify_query(query)

    # Default response
    response = None
    confidence = 0.0

    # User-specific categories
    if user:
        if category == "publishing_timeline":
            response = f"üìò Your book '{user.get('book_title', 'N/A')}' went live on {user.get('book_live_date', 'N/A')}."
            confidence = 0.95
        elif category == "isbn":
            response = f"üî¢ ISBN for '{user['book_title']}': {user['isbn']}."
            confidence = 0.95
        elif category == "royalty":
            response = f"üí∞ Royalty status for '{user.get('book_title', 'N/A')}': {user.get('royalty_status', 'N/A')}."
            confidence = 0.95
        elif category == "add_on":
            response = f"‚ú® Add-on services for '{user.get('book_title', 'N/A')}': {user.get('add_on_services', 'N/A')}."
            confidence = 0.95
        elif category == "final_submission":
            response = f"üìù Final submission date for '{user['book_title']}': {user.get('final_submission_date', 'N/A')}."
            confidence = 0.95

        elif category == "dashboard_access":
            response = f"üîë Dashboard access link sent to your registered email {user.get('email', 'N/A')}."
            confidence = 0.95
        elif category == "author_copy":
            response = f"üì¶ Author copies for '{user['book_title']}' are shipped 2-4 weeks after the book goes live. Tracking link will be sent via email."
            confidence = 0.95

        elif category == "all_book_details":
            response = (
                f"üìä Here are your book details:\n"
                f"- Title: {user['book_title']}\n"
                f"- Final Submission Date: {user['final_submission_date']}\n"
                f"- Live Date: {user['book_live_date']}\n"
                f"- Royalty Status: {user['royalty_status']}\n"
                f"- ISBN: {user['isbn']}\n"
                f"- Add-on Services: {user['add_on_services']}"
            )
            confidence = 0.95

    # If response still None, do KB search
    if response is None:
        kb_texts = [d['body'] for d in kb_docs]
        vectorizer = TfidfVectorizer()
        tfidf_matrix = vectorizer.fit_transform(kb_texts + [query])
        sims = cosine_similarity(tfidf_matrix[-1], tfidf_matrix[:-1]).flatten()
        best_idx = np.argmax(sims)
        confidence = sims[best_idx]
        if confidence >= CONFIDENCE_THRESHOLD:
            response = f"üìñ KB Answer: {kb_docs[best_idx]['body']}"
        else:
            response = "‚ö†Ô∏è I'm not confident about this query. Escalating to human agent."

    log_query(email, query, response, confidence)
    return response, confidence

"""**CLI Interface**"""

print("Welcome to Customer Query Bot. Type 'exit' to quit.")
while True:
    email = input("Enter your registered email: ").strip()
    query = input("Your query: ").strip()
    if query.lower() == "exit":
        break
    response, confidence = respond_to_query(email, query)
    print("Bot:", response, f"(confidence: {confidence:.2f})\n")

